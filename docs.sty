%! Class = docs
%! Author = Jander Moreira
%! Date = 2024/10

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{docs}[2024/10/27 v0.1 Format documentation]

\NewDocumentCommand{\DocsVersion}{}{v0.1}
\NewDocumentCommand{\DocsDate}{}{2024/10/27}

\RequirePackage{pgfopts}

\RequirePackage{etoolbox}
\newbool{docs@UsePresets}
\pgfkeys{
    docs/.cd,
    presets/.is if = docs@UsePresets,
}
\ProcessPgfOptions{/docs}

\appto{\ttfamily}{\frenchspacing}{}{}
\appto{\tableofcontents}{\bigskip}
\RequirePackage{snaptodo}
\RequirePackage{marginnote}
\setlength{\marginparwidth}{3cm}

\RequirePackage{enumitem}
\setlist{nosep}

\RequirePackage{textcomp}
\RequirePackage[all]{nowidow}
\RequirePackage{multicol}
\RequirePackage{ragged2e}

\RequirePackage{geometry}
\geometry{top = 2.5cm, bottom = 2cm, right = 2.5cm, left = 4cm}

\RequirePackage{hyperref}
\hypersetup{
    colorlinks,
    urlcolor = blue!20!black,
    linkcolor = blue!10!black,
    citecolor = black!80,
}

\RequirePackage{makeidx}
\makeindex

\RequirePackage{minted}
\newminted{latex}{autogobble, breaklines, bgcolor = blue!5, fontsize = \footnotesize}
\newmintinline{latex}{}

\RequirePackage{tcolorbox}
\tcbuselibrary{most, minted}

\newbool{docs@InExample}
\tcbset{
    description/.style = {
        coltitle = black,
        fontupper = \normalsize,
        colbacktitle = black!10,
        titlerule = 0.001pt,
        enhanced jigsaw,
        breakable,
        width = \dimexpr \linewidth - 2em \relax,
        flush right,
        top = 0.5ex,
        bottom = 0pt,
        left = 0pt,
        right = 0pt,
        opacitybacktitle = 0,
        opacityframe = 0,
        opacityback = 0,
    },
    example/.style = {
        enhanced jigsaw,
        breakable,
        colback = blue!3,
        colframe = blue!40!black!30,
        sharp corners,
        box align = top,
        boxrule = 1pt,
        fontupper = \footnotesize,
        fontlower = \footnotesize,
        listing engine = minted,
        minted options = {
            fontsize = \footnotesize,
            breaklines,
            autogobble,
        },
        before lower = {\booltrue{docs@InExample}},
        after lower = {\boolfalse{docs@InExample}},
    }
}
\newtcblisting{DocsExample}{example}

\RequirePackage{cleveref}

% Support code

\ExplSyntaxOn
\seq_new:N \g_docs_list_of_elements_seq
\cs_new:Npn \docs_put_element:n #1 {
    \seq_put_left:Nn \g_docs_list_of_elements_seq { #1 }
}
\cs_new:Npn \docs_if_element_exists:nTF #1#2#3 {
    \seq_if_in:NnTF \g_docs_list_of_elements_seq { #1 } { #2 } { #3 }
}

\NewDocumentCommand{\docs@PutElement}{ m }{
    \docs_put_element:n { #1 }
}
\NewDocumentCommand{\docs@IfElementExists}{ m +m +m }{
    \docs_if_element_exists:nTF { #1 } { #2 } { #3 }
}
\ExplSyntaxOff

\docs@PutElement{docs@Element}

\newlength{\docs@ContentLength}
\NewDocumentCommand{\docs@IfHasLength}{ m +m +m }{%
    \settowidth{\docs@ContentLength}{#1}%
    \ifdimgreater{\docs@ContentLength}{0pt}{#2}{#3}%
}



\NewDocumentCommand{\PackageName}{ O{} m }{%
    \begingroup%
    \DocsSet{#1}%
    \mbox{\docs@PackageStyle#2}%
    \endgroup%
}

% Arguments
\NewDocumentCommand{\Argument}{ O{} m }{%
    \begingroup%
    \DocsSet{#1}%
    \textcolor{docs@ArgumentColor}{$\langle$\normalfont\small\textsl{#2}$\rangle$}%
    \endgroup%
}
\NewDocumentCommand{\MArg}{ O{} m }{%
    \mbox{\texttt{\{}\Argument[#1]{#2}\texttt{\}}}%
}
\NewDocumentCommand{\OArg}{ O{} m }{%
    \mbox{\texttt{[}\Argument[#1]{#2}\texttt{]}}%
}
\NewDocumentCommand{\AArg}{ O{} m }{%
    \mbox{\texttt{<}\Argument[#1]{#2}\texttt{>}}%
}
\NewDocumentCommand{\PArg}{ m }{%
    \mbox{\texttt{\{#1\}}}%
}

% General text
\NewDocumentCommand{\Deprecated}{}{\textcolor{red!80!black}{(deprecated)}}
\NewDocumentCommand{\Empty}{}{%
    \mbox{\normalfont\textcolor{black!60}{\textsl{--empty--}}}
}
\NewDocumentCommand{\DocsTilde}{}{\raisebox{-0.5ex}{\~{}}}

% Elements
\pgfkeys{
    /docs/.cd,
    argument color/.code = {\colorlet{docs@ArgumentColor}{#1}},
    package style/.store in = \docs@PackageStyle,
% element specific options
    prefix/.code = {\csdef{docs@\csuse{docs@Element}@Prefix}{#1}},
    prefix/.value required,
    arguments prefix/.code = {\csdef{docs@\csuse{docs@Element}@ArgumentsPrefix}{#1}},
    arguments prefix/.value required,
    complement prefix/.code = {\csdef{docs@\csuse{docs@Element}@ComplementPrefix}{#1}},
    complement prefix/.value required,
    index heading/.code = {\csdef{docs@\csuse{docs@Element}@IndexEntry}{#1}},
    index heading/.value required,
    index remark/.code = {\csdef{docs@\csuse{docs@Element}@IndexRemark}{#1}},
    index remark/.value required,
    font/.code = {\csdef{docs@\csuse{docs@Element}@Font}{#1}},
    font/.value required,
    color/.code = {\colorlet{docs@\csuse{docs@Element}@Color}{#1}},
    color/.value required,
    no single index/.default = true,
    no single index/.code = {%
        \providebool{docs@\csuse{docs@Element}@NoSingleEntry}%
        \docs@CheckTrueFalse{no single index}{#1}{%
            \csuse{bool#1}{docs@\csuse{docs@Element}@NoSingleEntry}%
        }%
    },
    no group index/.default = true,
    no group index/.code = {%
        \providebool{docs@\csuse{docs@Element}@NoGroupEntry}%
        \docs@CheckTrueFalse{no group index}{#1}{%
            \csuse{bool#1}{docs@\csuse{docs@Element}@NoGroupEntry}%
        }
    },
% version changes
    version prefix/.store in = \docs@VersionPrefix,
    header style/.store in = \docs@VersionStyle,
    entry style/.store in = \docs@ChangeStyle,
}

\NewDocumentCommand{\docs@CheckTrueFalse}{ m m m }{
    \ifstrequal{#2}{true}{#3}{%
        \ifstrequal{#2}{false}{#3}{%
            \PackageError{docs}{Option '#1' expects 'true' or 'false'}%
        }%
    }
}

\NewDocumentCommand{\docs@SetElementDefault}{ m }{%
    \csdef{docs@Element}{#1}% current element
    \pgfkeys{
        /docs/.cd,
        prefix = \csuse{docs@Element@Defaults@Prefix},
        arguments prefix = \csuse{docs@Element@Defaults@ArgumentsPrefix},
        complement prefix = \csuse{docs@Element@Defaults@ComplementPrefix},
        index heading = \docs@Element,
        index remark = ~(\docs@Element),
        font = \csuse{docs@Element@Defaults@Font},
        color = docs@Element@Defaults@Color,
        no single index = false,
        no group index = false,
    }%
    \csdef{docs@Element}{}% reset
}

\NewDocumentCommand{\DocsSetElement}{ m >{ \TrimSpaces } m }{%
    \docs@IfElementExists{#1}{%
        \csdef{docs@Element}{#1}% current element
        \pgfkeys{/docs/.cd, #2}%
        \csdef{docs@Element}{}% reset
    }{%
        \PackageError{docs}{Element '#1' does not exist}%
    }
}
\NewDocumentCommand{\DocsSet}{ >{ \TrimSpaces } m }{%
    \csdef{docs@Element}{Element@Defaults}%
    \pgfkeys{/docs/.cd, #1}%
    \csdef{docs@Element}{}% reset
}

\DocsSet{
    package style = \sffamily,
    argument color = orange!50!black,
    prefix = {},
    arguments prefix = {},
    complement prefix = \hfill,
    index heading = {},
    index remark = {},
    font = \ttfamily,
    color = .!75,
    no single index = false,
    no group index = false,
}


\ExplSyntaxOn
\NewDocumentCommand{\DocsNewElement}{ m m }{
    \docs@IfElementExists{#1}{
        \PackageError{docs}{Element~'#1'~already~created}
    }{
        \docs@PutElement{#1}
        \docs@SetElementDefault{#1}%
        \DocsSetElement{#1}{#2}%
        \exp_args:Nc \NewDocumentCommand { #1 }{ m }{
            \DocsElement{#1}{##1}
        }
        \exp_args:Nc \NewDocumentCommand { #1Def }{ m }{
            \DocsDefElement{#1}{##1}
        }
        \exp_args:Nc \NewDocumentCommand { #1Ref }{ m }{
            \DocsRefElement{#1}{##1}
        }
        \exp_args:Nc \NewDocumentCommand { #1Ind }{ m }{
            \DocsIndElement{#1}{##1}
        }
        \exp_args:Nc \NewDocumentCommand { #1Index }{ m }{
            \DocsIndexElement{#1}{##1}
        }
        \exp_args:Nc \NewDocumentCommand { #1RefInd }{ m }{
            \DocsRefIndElement{#1}{##1}
        }
        \NewDocumentEnvironment{#1*}{ m m m }{%
            \begin{element*}{#1}{##1}{##2}{##3}
            }{
            \end{element*}
        }
        \NewDocumentEnvironment{#1def}{ m m m }{
            \begin{elementdef}{#1}{##1}{##2}{##3}
            }{
            \end{elementdef}
        }
        \NewDocumentEnvironment{#1env}{ m m }{
            \begin{elementenv*}{#1}{##1}{##2}
            }{
            \end{elementenv*}
        }
    }
}
\ExplSyntaxOff

% #1: Element type
% #2: Element instance
\NewDocumentCommand{\DocsElement}{ m m }{%
    \ifcsdef{\string\color@docs@#1@Color}{%
        \mbox{\textcolor{docs@#1@Color}{\csuse{docs@#1@Font}\csuse{docs@#1@Prefix}#2}}%
    }{%
        \mbox{\csuse{docs@#1@Prefix}\csuse{docs@#1@Font}#2}%
    }%
}

% #1: Element type
% #2: Element instance
\NewDocumentCommand{\DocsIndexElement}{ m m }{%
    \ifbool{docs@#1@NoSingleEntry}{}{%
        \index{#2@\DocsElement{#1}{#2}\csuse{docs@#1@IndexRemark}}%
    }%
    \ifbool{docs@#1@NoGroupEntry}{}{%
        \index{\csuse{docs@#1@IndexEntry}!#2@\DocsElement{#1}{#2}}%
    }%
}

% #1: Element type
% #2: Element instance
\NewDocumentCommand{\DocsIndElement}{ m m }{%
    \DocsIndexElement{#1}{#2}%
    \DocsElement{#1}{#2}%
}

% #1: Element type
% #2: Element instance
\NewDocumentCommand{\DocsRefElement}{ m m }{%
    \hyperref[#1:#2]{\DocsElement{#1}{#2}}%
}

% #1: Element type
% #2: Element instance
\NewDocumentCommand{\DocsDefElement}{ m m }{%
    \phantomsection%
    \label{#1:#2}%
    \DocsIndexElement{#1}{#2}%
    \DocsElement{#1}{#2}%
}

% #1: Element type
% #2: Element instance
\NewDocumentCommand{\DocsRefIndElement}{ m m }{%
    \DocsIndexElement{#1}{#2}%
    \hyperref[#1:#2]{\DocsElement{#1}{#2}}%
}

% #1: Element type
% #2: Element instance
% #3: Arguments
% #4: Value
\NewDocumentEnvironment{element*}{ m m m m }{%
    \begin{tcolorbox}[
        title = {%
        \hspace{-2em}\DocsElement{#1}{#2}%
        \docs@IfHasLength{#3}{\csuse{docs@#1@ArgumentsPrefix}#3}{}%
        \docs@IfHasLength{#4}{\csuse{docs@#1@ComplementPrefix}#4}{}%
        },
        description,
    ]%
    }{%
    \end{tcolorbox}%
    \medskip%
}

% #1: Element type
% #2: Element instance
% #3: Arguments
% #4: Default
\NewDocumentEnvironment{elementdef}{ m m m m }{
    \begin{element*}{#1}{#2}{#3}{#4}
        \DocsIndexElement{#1}{#2}%
        \label{#1:#2}
        }{
    \end{element*}
}

% #1: Element type
% #2: Environment name
% #3: Arguments
% #4: Environment contents
\NewDocumentEnvironment{elementenv*}{ m m m m }{%
    \begin{tcolorbox}%
        [
        title = {%
            %! parser=off
            \hspace{-2em}\latexinline!\begin!\texttt{\{}\csuse{#1}{#2}\texttt{\}}#3\par
            \docs@IfHasLength{#4}{#4}{\Argument{environment contents}}\par
            \hspace{-2em}\latexinline!\end!\texttt{\{}\csuse{#1}{#2}\texttt{\}}%
            %! parser=on
        },
        description,
        ]
            }{%
    \end{tcolorbox}%
    \medskip%
}

\NewDocumentEnvironment{elementenv}{ m m m }{%
    \begin{elementenv*}{#1}{#2}{#3}
    }{%
    \end{elementenv*}
}

\ifbool{docs@UsePresets}{
    \definecolor{docs@OptionColor}{HTML}{687821}
    \colorlet{docs@EnvironmentColor}{brown!80!magenta}
    \colorlet{docs@MacroColor}{green!50!black}

    \DocsNewElement{Option}{
        color = docs@OptionColor,
        arguments prefix = \texttt{ = },
        index heading = Options,
        index remark = ~(option),
    }
    \DocsNewElement{Macro}{
        prefix = \textbackslash,
        color = docs@MacroColor,
        index heading = Macros,
        index remark = ~(macro),
    }
    \DocsNewElement{Environment}{
        color = docs@EnvironmentColor,
        index heading = Environments,
        index remark = ~(environment),
    }
}{}

%%%%%%%%%%%%%%%%%%

\DocsSet{
    version prefix = {},
    header style = \bfseries\footnotesize,
    entry style = \footnotesize\RaggedRight,
}

%% Internal commands
\ExplSyntaxOn

% StepChangeCounter: proceeds to a new change
\int_zero_new:N \g_docs_change_counter_int
\NewDocumentCommand{\docs@StepChangeCounter}{}{
    \int_gadd:Nn \g_docs_change_counter_int { 1 }
}
\NewDocumentCommand{\docs@CurrentChangeCounter}{}{
    \int_use:N \g_docs_change_counter_int
}

% SetChangeAttribute: sets the an attribute of the current change record
% #1: attribute
% #2: value
\cs_new:Npn \set_change_attribute:nn #1#2 {
    \tl_clear_new:c { g_vc_change_ \int_use:N \g_docs_change_counter_int _#1_tl }
    \tl_gset:cn { g_vc_change_ \int_use:N \g_docs_change_counter_int _#1_tl } { #2 }
}
\NewDocumentCommand{\docs@SetChangeAttribute}{ m m }{
    \set_change_attribute:nn { #1 } { #2 }
}

% SetChangeAttributeExpanded: sets the an attribute of the current change record
% #1: attribute
% #2: value
\NewDocumentCommand{\docs@SetChangeAttributeExpanded}{ m m }{
    \exp_args:Nnf \set_change_attribute:nn { #1 } { #2 }
}

% GetChangeInfo: returns the field of a change
% #1: number of the change
% #2: field
% #3: (optional) sets macro instead of returning value
\NewDocumentCommand{\docs@GetChangeInfo}{ m m o }{
    \IfValueTF{#3}{
        \tl_set:Nx #3 { \tl_use:c { g_vc_change_#1_#2_tl } }
    }{
        \tl_use:c { g_vc_change_#1_#2_tl }
    }
}

% SetMacroChangeInfo: sets a macro with the field of a change
% #1: macro
% #2: number of the change
% #3: field
\NewDocumentCommand{\docs@SetMacroChangeInfo}{ m m m }{
    \tl_clear_new:N #1
    \exp_args:NNc \tl_set:NV #1 { g_vc_change_#2_#3_tl }
}

% RunChangesList: apply a macro to each change of a version
% #1: version
% #2: macro with a single mandatory argument
\NewDocumentCommand{\docs@RunChangesList}{ m m }{
    \seq_map_inline:cn { g_version_#1_seq } { #2 { ##1 } }
}


% docs@IfVersionExists
% #1: version
% #2: code if exists
% #3: code if not exists
\cs_new:Npn \docs_if_version_exists:nTF #1#2#3 {
    \seq_if_in:NnTF \g_docs_versions_list_seq { #1 } { #2 } { #3 }
}
\NewDocumentCommand{\docs@IfVersionExists}{ m +m +m  }{
    \docs_if_version_exists:nTF { #1 } { #2 } { #3 }
}


% DocsNewVersion: add a version to the list os versions if it doesn't exist
% #1: version
% #2: date
\seq_new:N \g_docs_versions_list_seq
\cs_new:Npn \register_version:nn #1#2 {
    \seq_put_right:Nn \g_docs_versions_list_seq { #1 }
    \tl_clear_new:c { g_vc_version_#1_date_tl }
    \tl_gset:cn { g_vc_version_#1_date_tl } { #2 }
    \seq_new:c { g_version_#1_seq }
}
\NewDocumentCommand{\DocsNewVersion}{ m m }{
    \docs@IfVersionExists{#1}{
        \PackageError{docs}{Version~'#1'~already~exists}
    }{
        \register_version:nn { #1 } { #2 }
    }
}

% VersionDate: returns the date of a version OR sets a macro
%   with its (expanded) value
% #1: version
% #2: (optional) macro to store the value
\NewDocumentCommand{\docs@VersionDate}{ m o }{
    \IfValueTF{#2}{
        \tl_set:Nx #2 { \tl_use:c { g_vc_version_#1_date_tl } }
    }{
        \tl_use:c { g_vc_version_#1_date_tl }
    }
}


% AddChangeToVersion: add a change reference to the list of the version
% (a new list will be created if necessary)
% #1: version
\cs_new:Npn \add_change_to_version:n #1  {
    % Add a reference (change number) to the list
    % \tl_clear_new:N \l_change_number_tl
    % \exp_args:NNe \tl_set:Nn \l_change_number_tl { \int_use:N \g_docs_change_counter_int }
    \exp_args:Nco \seq_gput_right:Nn { g_version_#1_seq } { \int_use:N \g_docs_change_counter_int }
}
\NewDocumentCommand{\docs@AddChangeToVersion}{ }{
    \add_change_to_version:n {
        \tl_use:c { g_vc_change_ \int_use:N \g_docs_change_counter_int _version_tl }
    }
}


% RunVersionList: apply a macro to each version of the list
% #1: macro with a single mandatory argument
\NewDocumentCommand{\docs@RunVersionList}{ m }{
    \seq_map_inline:Nn \g_docs_versions_list_seq { #1 { ##1 } }
}

\ExplSyntaxOff

%%

\newbool{docs@HideBox}
\newbool{docs@NoListing}
\pgfkeys{
    /docs/.cd,
    version/.code = {\docs@SetChangeAttribute{version}{#1}},
    description/.code = {\docs@SetChangeAttribute{description}{#1}},
    page/.code = {\docs@SetChangeAttributeExpanded{page}{#1}},
    no page/.style = {page = {}},
    no box/.is if = docs@HideBox,
    no listing/.is if = docs@NoListing,
    type/.is choice,
    type/new/.code = {\docs@SetChangeAttribute{type}{New in}},
    type/updated/.code = {\docs@SetChangeAttribute{type}{Updated in}},
    type/changed/.code = {\docs@SetChangeAttribute{type}{Changed in}},
    type/removed/.code = {\docs@SetChangeAttribute{type}{Removed in}},
    type/deprecated/.code = {\docs@SetChangeAttribute{type}{Deprecated in}},
    .unknown/.code = {\pgfkeysalso{type = \pgfkeyscurrentname}},
}

\DocsSet{
    no box = false,
    no listing = false,
}

%% #1: (optional) todonotes options
%% #2: text
%\NewDocumentCommand{\docs@MarginNote}{ O{} > { \TrimSpaces } m }{%
%    \todo[bordercolor = blue!20, backgroundcolor = blue!10,
%        linecolor = blue!20, tickmarkheight = 0.2ex, size = \tiny,
%        noline, #1]{%
%        #2
%    }%
%}


% DocsAddChange: records a new change
% #2: comma-separated list with change description
%\newbool
%\AtBeginEnvironment{tcblisting}{}
\NewDocumentCommand{\DocsAddChange}{ m o > { \TrimSpaces } m O{} }{%
    \docs@IfVersionExists{#1}{%
        \begingroup%
        \pgfkeys{
            /docs/.cd,
            page = \thepage,
            version = #1,
            type = new,
            description = \textbf{???},
            #3,
        }%
        \hspace{0pt}%
        \docs@AddChangeToVersion%
        \docs@SetChangeAttributeExpanded{star}{\ifbool{docs@NoListing}{*}{}}%
        \docs@SetChangeAttributeExpanded{label}{\docs@CurrentChangeCounter}%
        \docs@GetChangeInfo{\docs@CurrentChangeCounter}{label}[\docs@InfoResult]%
        \expandafter\label\expandafter{\docs@InfoResult:change}%
        \ifbool{docs@HideBox}{}{%
            %\reversemarginpar%
            %\ifbool{docs@InExample}{\let\marginpar\marginnote}{}%
            %\tikzset{
            %    notestyleraw/.append style = {rounded corners = 0pt, inner sep = 2pt},
            %}%
            \snaptodo[
                block sep = -0.2ex,
                call chain/.style = {draw = none},
                margin block/.style = {font = \tiny, blue!75!black},
                chain bias = -99in,  % force to left margin
                #4
            ]{%
                \IfValueT{#2}{\textbf{#2}:\\}{}%
                \scshape%
                \docs@GetChangeInfo{\docs@CurrentChangeCounter}{type}
                \docs@VersionPrefix\docs@GetChangeInfo{\docs@CurrentChangeCounter}{version}%
            }%
        }%
        \endgroup%
        \docs@StepChangeCounter%
    }{%
        \PackageWarning{docs}{#1 is not a valid version. Ignored}%
    }%
}

%%

% Internal commands
\ExplSyntaxOn

% Reading from file
\ior_new:N \g_docs_input_io

% LoadFile: reads a previous compiled version changes
\cs_new:Nn \load_file: {
    \tl_clear_new:N \g_docs_file_contents_tl
    \ior_open:NnTF \g_docs_input_io { \jobname.vcind } {
        \ior_map_inline:Nn \g_docs_input_io {
            \tl_gput_right:Nn \g_docs_file_contents_tl { ##1 }
        }
    }{}
}
\NewDocumentCommand{\docs@LoadChanges}{}{
    \load_file:
}
\NewDocumentCommand{\docs@FileContentsNotEmpty}{ +m }{
    \tl_if_empty:NTF \g_docs_file_contents_tl {} {
        #1
    }
}

% File contents
\NewDocumentCommand{\docs@FileContents}{}{
    \tl_use:N \g_docs_file_contents_tl
}

% Writing to file
\iow_new:N \g_docs_output_io
\tl_new:N \g_docs_output_buffer_tl

% OpenFile: open file for writing
\NewDocumentCommand{\docs@OpenFile}{ }{
    \iow_open:Nn \g_docs_output_io { \jobname.vcind }
}

% CloseFile: close file
\NewDocumentCommand{\docs@CloseFile}{ }{
    \iow_close:N \g_docs_output_io
}

% WriteBuffer: write to file
\cs_generate_variant:Nn \iow_now:Nn { NV }
\NewDocumentCommand{\docs@WriteBuffer}{ }{
    \iow_now:NV \g_docs_output_io \g_docs_output_buffer_tl
    \tl_clear:N \g_docs_output_buffer_tl
}

\NewDocumentCommand{\docs@AddToBuffer}{ +m }{
    \tl_gput_right:Nn \g_docs_output_buffer_tl { #1 }
}

\cs_generate_variant:Nn \tl_gput_right:Nn { Nx }
\NewDocumentCommand{\docs@AddCharToBuffer}{ m }{
    \tl_gput_right:Nx \g_docs_output_buffer_tl { \iow_char:N #1 }
}
\ExplSyntaxOff

% WriteVersionChange: write to file a single change
% #1: change number
\NewDocumentCommand{\docs@WriteVersionChange}{ m }{%
    \docs@AddToBuffer{ \DocsPrintChange}%
    \docs@SetMacroChangeInfo{\docs@InfoResult}{#1}{star}%
    \expandafter\docs@AddToBuffer\expandafter{\docs@InfoResult}%
    % version number
    \docs@AddCharToBuffer{\{}%
    \docs@SetMacroChangeInfo{\docs@InfoResult}{#1}{description}%
    \expandafter\docs@AddToBuffer\expandafter{\docs@InfoResult}%
    \docs@AddCharToBuffer{\}}%
    % date
    \docs@AddCharToBuffer{\{}%
    \docs@SetMacroChangeInfo{\docs@InfoResult}{#1}{page}%
    \expandafter\docs@AddToBuffer\expandafter{\docs@InfoResult}%
    \docs@AddCharToBuffer{\}}%
    % label
    \docs@AddCharToBuffer{\{}%
    \docs@SetMacroChangeInfo{\docs@InfoResult}{#1}{label}%
    \expandafter\docs@AddToBuffer\expandafter{\docs@InfoResult}%
    \docs@AddCharToBuffer{\}}%
    \docs@WriteBuffer
}

\NewDocumentCommand{\docs@WriteVersion}{ m }{%
%! parser = off
    \docs@AddToBuffer{\begin{vcversionitem}}%
    %! parser = on
    \docs@AddCharToBuffer{\{}%
    \docs@AddToBuffer{#1}%
    \docs@AddCharToBuffer{\}}%
    \docs@AddCharToBuffer{\{}%
    \docs@VersionDate{#1}[\docs@InfoResult]%
    \expandafter\docs@AddToBuffer\expandafter{\docs@InfoResult}%
    \docs@AddCharToBuffer{\}}%
    \docs@WriteBuffer
    \docs@RunChangesList{#1}{\docs@WriteVersionChange}%
%! parser = off
    \docs@AddToBuffer{\end{vcversionitem}}%
    %! parser = on
    \docs@WriteBuffer
}

\NewDocumentCommand{\docs@SaveChanges}{}{%
    \docs@OpenFile%
    \docs@RunVersionList{\docs@WriteVersion}%
    \docs@WriteBuffer
    \docs@CloseFile%
}

\NewDocumentCommand{\DocsPrintChanges}{ O{} }{%
    \docs@FileContentsNotEmpty{
        \begingroup%
        \DocsSet{#1}
        \section*{Change History}
        \begin{multicols}{2}
            \docs@FileContents%
        \end{multicols}
        \endgroup%
    }
}

%% Printing the list of changes
\NewDocumentEnvironment{vcversionitem}{ m m }{%
    \par\noindent%
    {\docs@VersionStyle\docs@VersionPrefix#1 (#2)}
    \vspace*{0.2em}\par%
    \begingroup%
    \setlength{\tabcolsep}{0pt}%
    \docs@ChangeStyle%
    }{%
    \endgroup%
    \vspace{0.5em}%
}

\newlength{\docs@PageNumberWidth}
\setlength{\docs@PageNumberWidth}{1cm}
\NewDocumentCommand{\DocsPrintChange}{ s m m m }{%
    \IfBooleanF{#1}{%
        \hspace{0.25cm}%
        \parbox[b]{\dimexpr \linewidth - \docs@PageNumberWidth - 0.25cm}{%
            \setlength{\hangindent}{0.7cm}#2%
            \ifstrempty{#3}{}{\dotfill}%
        }%
        \ifstrempty{#3}{}{%
            \hspace{-0.05cm}\dotfill~\hspace{0.05cm}\hyperref[#4:change]{#3}%
        }%
        \par\vspace{0.5em}
    }
}

%% Version numbering
\ExplSyntaxOn

\tl_new:N \g_docs_prefix_text_tl
\tl_new:N \g_docs_number_tl % todo: turn to int?
\tl_new:N \g_docs_suffix_text_tl
\regex_new:N \g_versioning_regex
\regex_set:Nn \g_versioning_regex { [^\.]+ }
\regex_new:N \g_subversioning_regex
\regex_set:Nn \g_subversioning_regex { ([^\d]*)(\d+)(.*) }

\cs_new:Npn \subversioning_check:n #1 {
    \seq_clear_new:N \l_subparts_seq
    \regex_extract_all:NnNTF \g_subversioning_regex { #1 } \l_subparts_seq {
        \tl_gset:Nx \g_docs_prefix_text_tl { \seq_item:Nn \l_subparts_seq {2} }
        \tl_gset:Nx \g_docs_number_tl { \seq_item:Nn \l_subparts_seq {3} }
        \tl_gset:Nx \g_docs_suffix_text_tl { \seq_item:Nn \l_subparts_seq {4} }
    }{
        \tl_gset:Nx \g_docs_prefix_text_tl { #1 }
        \tl_gclear:N \g_docs_number_tl
        \tl_gclear:N \g_docs_suffix_text_tl
    }
}
\cs_new:Npn \versioning_check:n #1 {
    \seq_clear_new:N \l_parts_seq
    \regex_extract_all:NnN \g_versioning_regex { #1 } \l_parts_seq
    \seq_map_inline:Nn \l_parts_seq {
        \subversioning_check:n { ##1 }
        <<(\tl_use:N \g_docs_prefix_text_tl)
        (\tl_use:N \g_docs_number_tl)
        (\tl_use:N \g_docs_suffix_text_tl)>>
    }
}
\NewDocumentCommand{\DocsVersioningCheck}{ m }{
    \par\noindent[\texttt{#1}:~\versioning_check:n { #1 }]\bigskip\par
}

\ExplSyntaxOff

% Hooks
\AtBeginDocument{%
    \docs@LoadChanges%
    \sloppy%
}
\AtEndDocument{\docs@SaveChanges}
